const synthetics = require("Synthetics");
const log = require("SyntheticsLogger");
const crypto = require("crypto");
const syntheticsConfiguration = synthetics.getConfiguration();

const apiCanaryBlueprint = async function () {
  syntheticsConfiguration.setConfig({
    restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
    restrictedUrlParameters: [], // Values of these url parameters will be redacted from logs and reports
  });

  // Handle validation for positive scenario
  const validateSuccessful = async function (res) {
    return new Promise((resolve, reject) => {
      if (res.statusCode < 200 || res.statusCode > 299) {
        throw new Error(res.statusCode + " " + res.statusMessage);
      }

      let responseBody = "";
      res.on("data", (d) => {
        responseBody += d;
      });

      res.on("end", () => {
        // Add validation on 'responseBody' here if required.
        resolve();
      });
    });
  };
  let uuid = crypto.randomUUID();

  // Set request option for Get Items
  let requestOptionsStep1GetItems = {
    hostname: process.env.EKS_URL_BASE,
    method: "GET",
    path: `/apps/cart/cart/${uuid}/items`,
    port: "80",
    protocol: "http:",
    body: "",
    headers: {
      "User-Agent": synthetics.getCanaryUserAgentString(),
      "Content-Type": "application/json",
    },
  };

  //Set request option for Add Item
  let requestOptionsStep2AddItem = {
    hostname: process.env.EKS_URL_BASE,
    method: "POST",
    path: `/apps/cart/cart`,
    port: "80",
    protocol: "http:",
    body: JSON.stringify({
      id: uuid,
      items: MockedBookCatalog.mockBooks(),
    }),
    headers: {
      "User-Agent": synthetics.getCanaryUserAgentString(),
      "Content-Type": "application/json",
    },
  };

  //Set request options for Get Cart
  let requestOptionsStep3GetCart = {
    hostname: process.env.EKS_URL_BASE,
    method: "GET",
    path: `/apps/cart/cart/${uuid}`,
    port: "80",
    protocol: "http:",
    body: "",
    headers: {
      "User-Agent": synthetics.getCanaryUserAgentString(),
      "Content-Type": "application/json",
    },
  };
  requestOptionsStep3GetCart["headers"]["User-Agent"] = [
    synthetics.getCanaryUserAgentString(),
    requestOptionsStep3GetCart["headers"]["User-Agent"],
  ].join(" ");

  // Set steps config option for Verify URL
  let stepsConfig = {
    includeRequestHeaders: false,
    includeResponseHeaders: false,
    includeRequestBody: true,
    includeResponseBody: false,
    continueOnHttpStepFailure: true,
  };

  //Get Cart Items
  await synthetics.executeHttpStep(
    `Get Cart Items ${process.env.EKS_URL_BASE}`,
    requestOptionsStep1GetItems,
    validateSuccessful,
    stepsConfig
  );

  //Add Item to Cart
  await synthetics.executeHttpStep(
    `Add Item to Cart ${process.env.EKS_URL_BASE}`,
    requestOptionsStep2AddItem,
    validateSuccessful,
    stepsConfig
  );

  //Get Cart
  await synthetics.executeHttpStep(
    `Get Cart ${process.env.EKS_URL_BASE}`,
    requestOptionsStep3GetCart,
    validateSuccessful,
    stepsConfig
  );

};

exports.handler = async () => {
  return await apiCanaryBlueprint();
};


class MockedBookCatalog {
  static mockBooks() {
      const books = [];
      const max = Math.floor(Math.random() * (10 - 2) + 2); // Random number between 2 and 10

      for (let i = 1; i <= max; i++) {
          books.push({
              id: crypto.randomUUID(), 
              title: "Book " + i,
              author: "Author " + i,
              year: 2000 + 1
          });
      }
      return books;
  }
}
const synthetics = require("Synthetics");
const log = require("SyntheticsLogger");
const crypto = require("crypto");
const syntheticsConfiguration = synthetics.getConfiguration();

const apiCanaryBlueprint = async function () {
  syntheticsConfiguration.setConfig({
    restrictedHeaders: [], // Value of these headers will be redacted from logs and reports
    restrictedUrlParameters: [], // Values of these url parameters will be redacted from logs and reports
  });

  // Handle validation for positive scenario
  const validateSuccessful = async function (res) {
    return new Promise((resolve, reject) => {
      if (res.statusCode < 200 || res.statusCode > 299) {
        throw new Error(res.statusCode + " " + res.statusMessage);
      }

      let responseBody = "";
      res.on("data", (d) => {
        responseBody += d;
      });

      res.on("end", () => {
        // Add validation on 'responseBody' here if required.
        resolve();
      });
    });
  };
  let uuid = crypto.randomUUID();

  // Set request option for Verify URL
  let requestOptionsStep1 = {
    hostname: process.env.EKS_URL_BASE,
    method: "GET",
    path: `/apps/cart/cart/${uuid}`,
    port: "80",
    protocol: "http:",
    body: "",
    headers: {},
  };
  requestOptionsStep1["headers"]["User-Agent"] = [
    synthetics.getCanaryUserAgentString(),
    requestOptionsStep1["headers"]["User-Agent"],
  ].join(" ");

  // Set step config option for Verify URL
  let stepConfig1 = {
    includeRequestHeaders: false,
    includeResponseHeaders: false,
    includeRequestBody: false,
    includeResponseBody: false,
    continueOnHttpStepFailure: true,
  };

  await synthetics.executeHttpStep(
    `Verify ${process.env.EKS_URL_BASE}`,
    requestOptionsStep1,
    validateSuccessful,
    stepConfig1
  );
};

exports.handler = async () => {
  return await apiCanaryBlueprint();
};


